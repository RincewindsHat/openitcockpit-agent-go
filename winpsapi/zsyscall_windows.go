// Code generated by 'go generate'; DO NOT EDIT.

package winpsapi

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
	modpsapi    = windows.NewLazySystemDLL("psapi.dll")

	procQueryFullProcessImageNameW = modkernel32.NewProc("QueryFullProcessImageNameW")
	procGetProcessImageFileNameW   = modpsapi.NewProc("GetProcessImageFileNameW")
	procGetProcessMemoryInfo       = modpsapi.NewProc("GetProcessMemoryInfo")
)

func queryFullProcessImageName(hProcess windows.Handle, dwFlags uint32, lpImageFileName *uint16, nSize *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procQueryFullProcessImageNameW.Addr(), 4, uintptr(hProcess), uintptr(dwFlags), uintptr(unsafe.Pointer(lpImageFileName)), uintptr(unsafe.Pointer(nSize)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func getProcessImageFileName(hProcess windows.Handle, lpImageFileName *uint16, nSize uint32) (n uint32, err error) {
	r0, _, e1 := syscall.Syscall(procGetProcessImageFileNameW.Addr(), 3, uintptr(hProcess), uintptr(unsafe.Pointer(lpImageFileName)), uintptr(nSize))
	n = uint32(r0)
	if n == 0 {
		err = errnoErr(e1)
	}
	return
}

func getProcessMemoryInfo(hProcess windows.Handle, mem *processMemoryCounters, cb uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procGetProcessMemoryInfo.Addr(), 3, uintptr(hProcess), uintptr(unsafe.Pointer(mem)), uintptr(cb))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
