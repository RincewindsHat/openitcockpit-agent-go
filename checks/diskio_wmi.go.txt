package checks

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/StackExchange/wmi"
)

// WMI Struct
// https://docs.microsoft.com/en-us/previous-versions/aa394262(v=vs.85)
type Win32_PerfFormattedData_PerfDisk_PhysicalDisk struct {
	AvgDiskBytesPerRead     uint64
	AvgDiskBytesPerTransfer uint64
	AvgDiskBytesPerWrite    uint64
	AvgDiskQueueLength      uint64
	AvgDiskReadQueueLength  uint64
	AvgDiskSecPerRead       uint32
	AvgDiskSecPerTransfer   uint32
	AvgDiskSecPerWrite      uint32
	AvgDiskWriteQueueLength uint64
	Caption                 string
	CurrentDiskQueueLength  uint32
	Description             string
	DiskBytesPerSec         uint64
	DiskReadBytesPerSec     uint64
	DiskReadsPerSec         uint32
	DiskTransfersPerSec     uint32
	DiskWriteBytesPerSec    uint64
	DiskWritesPerSec        uint32
	Frequency_Object        uint64
	Frequency_PerfTime      uint64
	Frequency_Sys100NS      uint64
	Name                    string
	PercentDiskReadTime     uint64
	PercentDiskTime         uint64
	PercentDiskWriteTime    uint64
	PercentIdleTime         uint64
	SplitIOPerSec           uint32
	Timestamp_Object        uint64
	Timestamp_PerfTime      uint64
	Timestamp_Sys100NS      uint64
}

// Run the actual check
// if error != nil the check result will be nil
// ctx can be canceled and runs the timeout
// CheckResult will be serialized after the return and should not change until the next call to Run
func (c *CheckDiskIo) Run(ctx context.Context) (interface{}, error) {

	var dst []Win32_PerfFormattedData_PerfDisk_PhysicalDisk
	err := wmi.Query("SELECT * FROM Win32_PerfFormattedData_PerfDisk_PhysicalDisk", &dst)
	if err != nil {
		return nil, err
	}

	diskResults := make(map[string]*resultDiskIo)

	// https://docs.microsoft.com/en-us/archive/blogs/askcore/windows-performance-monitor-disk-counters-explained
	for i, disk := range dst {

		fmt.Printf("AvgDiskSecPerRead: %v\n", disk.AvgDiskSecPerRead)

		diskName := disk.Name
		if diskName != "_Total" {
			//Remove the index from drive letter "0 C:" => "C:"
			diskName = strings.Replace(diskName, fmt.Sprintf("%v ", i), "", 1)
		}

		//No previous check results for calculations... wait until check runs again
		diskstats := &resultDiskIo{
			// Store counter values for next check evaluation
			Timestamp: time.Now().Unix(),
			Device:    diskName,

			// Store calculated values
			ReadIopsPerSecond:   uint64(disk.DiskReadsPerSec),
			WriteIopsPerSecond:  uint64(disk.DiskWritesPerSec),
			TotalIopsPerSecond:  uint64((disk.DiskReadsPerSec + disk.DiskWritesPerSec)),
			ReadBytesPerSecond:  disk.DiskReadBytesPerSec,
			WriteBytesPerSecond: disk.DiskWriteBytesPerSec,
			//TotalAvgWait:        totalAvgWait,
			//ReadAvgWait:         readAvgWait,
			//WriteAvgWait:        writeAvgWait,
			//ReadAvgSize:         readAvgSize,
			//WriteAvgSize:        writeAvgSize,
			//LoadPercent:         loadPercent,
		}

		//Store result for next check run
		diskResults[diskName] = diskstats

	}

	c.lastResults = diskResults
	return diskResults, nil
}
